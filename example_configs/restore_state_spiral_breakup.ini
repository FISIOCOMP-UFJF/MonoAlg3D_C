
# ======================================================================================
# Authors: Lucas Berg
# Description: This example demonstrates how to generate a sustained spiral wave
# that breaks into several others using the Mitchell & Schaeffer model.
# **************************************************************************************
# Features:
#   - This example uses the '[save_state]' and '[restore_state]' functions to 
# continue a previous simulation. 
# --------------------------------------------------------------------------------------
# After the spiral is sustained we save the simulation state at t=1000ms.
# The following files are generated in the 'output_dir':
#   - grid_checkpoint.dat
#   - ode_solver_checkpoint.dat
#   - monodomain_solver_checkpoint.dat
# --------------------------------------------------------------------------------------
# First of all, you should execute the 'save_state_spiral_breakup.ini'.
# Next, we continue the solution from the last simulation until
# we reach the final simulation time set to t=1200ms.
# ======================================================================================
[main]
num_threads=6
dt_pde=0.02
simulation_time=1200
abort_on_no_activity=false
use_adaptivity=false

# Output diretory must be the same in both 'save_state_spiral_breakup.ini' and 'restore_state_spiral_breakup.ini'
[save_result]
print_rate=100
output_dir=./outputs/plain_mesh_spiral_breakup   
main_function=save_as_vtu
init_function=init_save_as_vtk_or_vtu
end_function=end_save_as_vtk_or_vtu
save_pvd=true
file_prefix=V

# Here, we restore the simulation state
[restore_state]
main_function=restore_simulation_state

[update_monodomain]
main_function=update_monodomain_default

[assembly_matrix]
init_function=set_initial_conditions_fvm
sigma_x=0.00001 
sigma_y=0.00001
sigma_z=0.00001
library_file=shared_libs/libdefault_matrix_assembly.so
main_function=homogeneous_sigma_assembly_matrix

[linear_system_solver]
tolerance=1e-16
use_preconditioner=no
use_gpu=yes
max_iterations=200
library_file=shared_libs/libdefault_linear_system_solver.so
main_function=conjugate_gradient
init_function=init_conjugate_gradient
end_function=end_conjugate_gradient

[domain]
name=Plain Mesh
num_layers=1
start_dx=100.0
start_dy=100.0
start_dz=100.0
side_length=20000
main_function=initialize_grid_with_square_mesh

[ode_solver]
dt=0.02
use_gpu=yes
gpu_id=0
library_file = shared_libs/libmitchell_shaeffer_2003.so

#[stim_s1]
#start = 0.0
#duration = 2.0
#current = 1.0
#x_limit = 400.0
#main_function=stim_if_x_less_than
#
#[stim_s2]
#start = 380.0
#duration = 2.0
#current = 1.0
#min_x = 0.0
#max_x = 10000.0
#min_y = 0.0
#max_y = 10000.0
#main_function=stim_x_y_limits
